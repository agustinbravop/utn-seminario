generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model administrador {
  id       Int    @id @default(autoincrement()) @map("idAdministrador")
  usuario  String @unique @db.VarChar
  correo   String @unique @db.VarChar
  clave    String @db.VarChar
  nombre   String @db.VarChar
  apellido String @db.VarChar
  telefono String @db.VarChar

  idTarjeta        Int               @unique
  tarjeta          tarjeta           @relation(fields: [idTarjeta], references: [id], onDelete: Cascade)
  idSuscripcion    Int
  suscripcion      suscripcion       @relation(fields: [idSuscripcion], references: [id], onDelete: NoAction, onUpdate: NoAction)
  establecimiento  establecimiento[]
  pagosSuscripcion pagoSuscripcion[]
}

model cancha {
  id          Int     @id @default(autoincrement()) @map("idCancha")
  nombre      String  @db.VarChar
  descripcion String  @db.VarChar
  habilitada  Boolean @default(true)
  urlImagen   String? @db.VarChar
  eliminada   Boolean @default(false)

  idEstablecimiento Int
  establecimiento   establecimiento  @relation(fields: [idEstablecimiento], references: [id], onDelete: NoAction, onUpdate: NoAction)
  disponibilidades  disponibilidad[]
}

model disciplina {
  disciplina String @id @db.VarChar

  disponibilidades disponibilidad[]
  jugador          jugador[]
}

model disponibilidad {
  id            Int        @id @default(autoincrement()) @map("idDisponibilidad")
  horaInicio    String     @db.Char(5)
  horaFin       String     @db.Char(5)
  precioReserva Decimal    @db.Decimal
  precioSenia   Decimal?   @db.Decimal
  idCancha      Int        @map("cancha")
  cancha        cancha     @relation(fields: [idCancha], references: [id])
  idDisciplina  String     @map("disciplina") @db.VarChar
  disciplina    disciplina @relation(fields: [idDisciplina], references: [disciplina])
  dias          dia[]
  reservas      reserva[]
}

model dia {
  dia            String           @id
  disponibilidad disponibilidad[]
}

model establecimiento {
  id                 Int     @id @default(autoincrement()) @map("idEstablecimiento")
  nombre             String  @db.VarChar
  telefono           String
  direccion          String  @db.VarChar
  urlImagen          String? @db.VarChar
  correo             String  @db.VarChar
  habilitado         Boolean @default(true)
  eliminado          Boolean @default(false)
  horariosDeAtencion String?

  idLocalidad     Int
  localidad       localidad      @relation(fields: [idLocalidad], references: [id])
  idAdministrador Int
  administrador   administrador  @relation(fields: [idAdministrador], references: [id], onDelete: NoAction, onUpdate: NoAction)
  canchas         cancha[]
  metodosDePago   metodoDePago[]

  @@unique([id, nombre])
}

model localidad {
  id     Int    @id @default(autoincrement()) @map("idLocalidad")
  nombre String

  idProvincia     String
  provincia       provincia         @relation(fields: [idProvincia], references: [provincia])
  establecimiento establecimiento[]
  jugador         jugador[]

  @@unique([nombre, idProvincia])
}

model provincia {
  provincia String @id

  localidad localidad[]
}

model metodoDePago {
  metodoDePago String @id @db.VarChar()

  establecimientos establecimiento[]
  pagos            pago[]
}

model jugador {
  id       Int     @id @default(autoincrement()) @map("idJugador")
  usuario  String  @unique @db.VarChar
  correo   String  @unique @db.VarChar
  clave    String? @db.VarChar
  nombre   String  @db.VarChar
  apellido String  @db.VarChar
  telefono String? @db.VarChar

  idLocalidad  Int?
  localidad    localidad?  @relation(fields: [idLocalidad], references: [id])
  idDisciplina String?     @map("disciplina") @db.VarChar
  disciplina   disciplina? @relation(fields: [idDisciplina], references: [disciplina])
  reservas     reserva[]
}

model pago {
  id        Int      @id @default(autoincrement()) @map("idPago")
  monto     Decimal  @db.Decimal
  fechaPago DateTime @db.Timestamp(6)

  idMetodoDePago String       @map("metodoDePago") @db.VarChar
  metodoDePago   metodoDePago @relation(fields: [idMetodoDePago], references: [metodoDePago], onDelete: NoAction, onUpdate: NoAction)
  reservas       reserva[]    @relation("pagoReserva")
  senias         reserva[]    @relation("pagoSenia")
}

model pagoSuscripcion {
  idPagoSuscripcion Int      @id @default(autoincrement())
  monto             Decimal  @db.Decimal
  fechaPago         DateTime @db.Timestamp(6)
  fechaVencimiento  DateTime @db.Timestamp(6)

  idAdministrador Int
  administrador   administrador @relation(fields: [idAdministrador], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model suscripcion {
  id                     Int     @id @default(autoincrement()) @map("idSuscripcion")
  nombre                 String  @unique @db.VarChar
  limiteEstablecimientos Int
  costoMensual           Decimal

  administrador administrador[]
}

model reserva {
  id                  Int      @id @default(autoincrement()) @map("idReserva")
  fechaCreada         DateTime @default(now()) // Fecha en la que se cre√≥ la reserva.
  fechaReservada      DateTime @db.Date // Fecha en la que el jugador va a ocupar la disponibilidad reservada.
  precio              Decimal  @db.Decimal
  senia               Decimal? @db.Decimal
  cancelada           Boolean  @default(false) // Si es `true` se puede reservar de nuevo la disponibilidad.
  jugadorNoRegistrado String? // Es el nombre ingresado por el administrador que hizo la reserva para el jugador.

  idDisponibilidad Int
  disponibilidad   disponibilidad @relation(fields: [idDisponibilidad], references: [id], onDelete: NoAction, onUpdate: NoAction)
  idJugador        Int?
  jugador          jugador?       @relation(fields: [idJugador], references: [id], onDelete: NoAction, onUpdate: NoAction)
  idPagoReserva    Int?           @unique
  pagoReserva      pago?          @relation("pagoReserva", fields: [idPagoReserva], references: [id], onDelete: NoAction, onUpdate: NoAction)
  idPagoSenia      Int?           @unique
  pagoSenia        pago?          @relation("pagoSenia", fields: [idPagoSenia], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model tarjeta {
  id          Int    @id @default(autoincrement()) @map("idTarjeta")
  nombre      String @db.VarChar
  numero      String
  cvv         Int
  vencimiento String

  administrador administrador?
}
